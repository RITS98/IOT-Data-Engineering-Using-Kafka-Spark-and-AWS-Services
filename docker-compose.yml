x-spark-common: &spark-common
    image: bitnami/spark:latest
    volumes:
        - ./jobs:/opt/bitnami/spark/jobs
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
        spark-master:
            condition: service_healthy
    environment:
        SPARK_MODE: Worker
        SPARK_WORKER_CORES: 2
        SPARK_WORKER_MEMORY: 2g
        SPARK_MASTER_URL: spark://spark-master:7077
    networks:
        - my_network



services:
    # db:
    #    container_name: postgres_container
    #    image: postgres:14
    #    environment:
    #        POSTGRES_USER: airflow
    #        POSTGRES_PASSWORD: airflow
    #        POSTGRES_DB: airflow_db
    #    ports:
    #        - "5421:5432"
    #    volumes:
    #        - ./postgres/data:/var/lib/postgresql/data
    #    #- ./postgres/airflow_init.sql:/docker-entrypoint-initdb.d/airflow_init.sql
    #    healthcheck:
    #        test: ["CMD-SHELL", "pg_isready -U airflow -d airflow_db"]
    #        interval: 5s
    #        timeout: 5s
    #        retries: 5
    #    networks:
    #        - my_network

    #airflow:
    #    container_name: airflow_container
    #    image: apache/airflow:3.0.0  # Change to a valid version
    #    ports:
    #        - "8063:8080"
    #    environment:
    #        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db:5432/airflow_db
    #        PYTHONPATH: /opt/airflow
    #    env_file:
    #        - .env
    #    restart: unless-stopped
    #    volumes:
    #        - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    #        - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    #        - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    #        - ${AIRFLOW_PROJ_DIR:-.}/requirements.txt:/opt/airflow/requirements.txt
    #        - ${AIRFLOW_PROJ_DIR:-.}/code:/opt/airflow/code
    #    command: >
    #        bash -c "
    #        pip install -r /opt/airflow/requirements.txt &&
    #        airflow db migrate &&
    #        airflow standalone
    #        "
    #    depends_on:
    #        db:
    #            condition: service_healthy
    #    networks:
    #        - my_network        

    zookeeper:
        container_name: zookeeper_container
        image: confluentinc/cp-zookeeper:7.4.0
        hostname: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        healthcheck:
            test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - my_network
    
    broker:
        container_name: kafka_container
        image: confluentinc/cp-server:7.4.0
        hostname: broker
        depends_on:
            zookeeper:
                condition: service_healthy
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRICS_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9101
            KAFKA_JMX_HOSTNAME: localhost
            KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: 'false'
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
        healthcheck:
            test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - my_network

    spark-master:
        container_name: spark_master_container
        image: bitnami/spark:latest
        volumes:
            - ./jobs:/opt/bitnami/spark/jobs
        command: bin/spark-class org.apache.spark.deploy.master.Master
        ports:
            - "9090:8080"
            - "7077:7077"
        healthcheck:
            test: ["CMD-SHELL", "timeout 2 bash -c '</dev/tcp/localhost/8080'"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - my_network
    
    spark-worker-1:
        <<: *spark-common
        container_name: spark_worker_1_container
    
    spark-worker-2:
        <<: *spark-common
        container_name: spark_worker_2_container

networks:
  my_network:
    driver: bridge
